name: Docker Image CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # 도커이미지 빌드 후 도커허브에 푸쉬
  build-server-docker-image:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    # 1. 도커 이미지 빌드
    - name: Build the Docker image
      run: docker build --platform linux/amd64 ./flower-map-server -t ${{ secrets.DOCKERHUB_USERNAME }}/flower-map-server-app
      
    # 2. 도커 허브 로그인
    - name: docker hub login
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}
        
    # 3. 도커 허브에 빌드한 이미지 푸쉬
    - name: docker hub push
      run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/flower-map-server-app

  # 위 과정에서 생성한 도커 이미지를 서버에서 실행
  run-docker-image-on-server:
    needs: build-server-docker-image
    runs-on: self-hosted

    steps:
      # 최신 이미지를 풀받습니다
      - name: docker pull
        run: sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/flower-map-server-app

      # 기존 컨테이너를 중지시킵니다
      - name: docker stop container
        run: sudo docker stop $(sudo docker ps -q) 2>/dev/null || true

      # 최신 이미지를 컨테이너화하여 실행시킵니다
      - name: docker run new container
        run: sudo docker run --name flower-map-server --rm -d -p 3000:3000 ${{ secrets.DOCKERHUB_USERNAME }}/flower-map-server-app
        env:
          SERVER_PORT: ${{ secrets.SERVER_PORT }}
          DB_TYPE: ${{ secrets.DB_TYPE }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_DATABASE: ${{ secrets.DB_DATABASE }}
          DB_SYNCHRONIZE: ${{ secrets.DB_SYNCHRONIZE }}
          DB_LOGGING: ${{ secrets.DB_LOGGING }}

      # 미사용 이미지를 정리합니다
      - name: delete old docker image
        run: sudo docker system prune -f
